.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::NS::Update 3"
.TH Net::NS::Update 3 "2014-04-30" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::NS::Update \- Perl module to do dynamic updates for DNS zones
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& my $update = Net::NS::Update\->new(
\&         origin => \*(Aqexample.com.\*(Aq,
\&         ttl => 3600,
\&         keyfile => \*(Aq/etc/bind/session.key\*(Aq,
\& );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Update your dynamic zones directly from Perl. This module either wraps
the nsupdate program or uses Net::DNS to send authenticated \s-1UPDATE\s0 
queries to the server, both using a single \s-1API\s0. You start by adding 
instructions to the module, and then run execute.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 11
\& Net::NS::Update\->new(
\&         origin=>\*(Aq.\*(Aq,
\&         ttl=>3600,
\&         keyfile=>\*(Aq/dev/null\*(Aq,
\&         timeout=>0,
\&         server=>\*(Aqfoobarbaz\*(Aq,
\&         port=>53535, 
\&         local=>0,
\&         datadir=>\*(Aq/tmp\*(Aq,
\&         backend=>\*(AqDNS\*(Aq,
\& );
.Ve
.SS "Options"
.IX Subsection "Options"
\fIkeyfile (required)\fR
.IX Subsection "keyfile (required)"
.PP
\fIbackend\fR
.IX Subsection "backend"
.PP
Which backend to use when communicating with the server. Can either
be \s-1DNS\s0 or nsupdate. \s-1DNS\s0 will use Net::DNS to do \s-1UPDATE\s0 queries, 
while nsupdate will wrap the nsupdate program (which of course,
depends on its availability on the system). Only nsupdate is 
implemented yet. By not specifying this, the module will first try
the \s-1DNS\s0 module and then fall back to the nsupdate module.
.PP
\fIorigin\fR
.IX Subsection "origin"
.PP
\fIttl\fR
.IX Subsection "ttl"
.PP
\fItimeout\fR
.IX Subsection "timeout"
.PP
\fIserver\fR
.IX Subsection "server"
.PP
\fIport\fR
.IX Subsection "port"
.PP
\fIlocal\fR
.IX Subsection "local"
.PP
\fIdatadir\fR
.IX Subsection "datadir"
.SH "METHODS"
.IX Header "METHODS"
.SS "execute"
.IX Subsection "execute"
Execute the instructions added using nsupdate, either using Net::DNS
or the nsupdate program.
.SS "add"
.IX Subsection "add"
Add a record to the zone.
.PP
.Vb 7
\& $update\->add(
\&        name=>$label, 
\&        type=>$rrtype, 
\&        ttl=>3600, 
\&        class=>\*(AqIN\*(Aq,
\&        data=>$data,
\& );
.Ve
.PP
ttl and class are optional.
.SS "del"
.IX Subsection "del"
Delete a domain, rrset or rr from the zone.
.PP
.Vb 6
\& $update\->del(
\&        name=>$label, 
\&        type=>$rrtype, 
\&        class=>\*(AqIN\*(Aq,
\&        data=>$data,
\& );
.Ve
.PP
Everything, except the name, is optional. No defaults will be used, 
unlike add.
.SS "list"
.IX Subsection "list"
Returns a list of the instructions that hasn't been sent to 
nsupdate yet. The index values of this array can be used as
argument to the undo method.
.SS "undo"
.IX Subsection "undo"
Before doing execute, you can delete an instruction. The 
argument is the array index, as seen when calling list.
.SS "ttl"
.IX Subsection "ttl"
Sets or gets the default ttl set for new domains. Defaults to 3600.
.SS "class"
.IX Subsection "class"
Sets or gets the class used for new domains. '\s-1IN\s0' is the default.
.SS "origin"
.IX Subsection "origin"
Sets or gets the origin domain (the domain appended to labels witout
trailing .). Defaults to \*(L".\*(R". This will be treated as a fully 
qualified domain, even if you don't have a trailing \*(L".\*(R". If you omit
the \*(L".\*(R" you will get a warning, but the dot will be appended anyways.
.PP
.Vb 2
\& $update\->origin(\*(Aqexample.com.\*(Aq);
\& my $origin = $update\->origin;
.Ve
.SS "error"
.IX Subsection "error"
Return the latest error message as a readable string.
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.SS "fqdnize"
.IX Subsection "fqdnize"
Helper method to make the domain fully qualified. This is done by 
appendning \f(CW$self\fR\->origin to the domain unless it already ends with \*(L".\*(R". 
This is primarily used internally by the module, but feel free to use 
it if you want to.
.SH ""
.IX Header ""
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
Git repository (\s-1VCS\s0) is available through Github:
.PP
.Vb 1
\& L<http://github.com/olof/Net\-NS\-Update>
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
\&\fInsupdate\fR\|(1)
.IP "\(bu" 4
Bind Administrator's Reference Manual, chapter 4, section 
        on dynamic updates
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011, Olof Johansson <olof@cpan.org>. All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it 
under the same terms as Perl itself.
